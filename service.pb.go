// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// publish can be called by a notary-client to open a topic and publish data on it
type PublishRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Data                 string   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishRequest) Reset()         { *m = PublishRequest{} }
func (m *PublishRequest) String() string { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()    {}
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *PublishRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishRequest.Unmarshal(m, b)
}
func (m *PublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishRequest.Marshal(b, m, deterministic)
}
func (m *PublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRequest.Merge(m, src)
}
func (m *PublishRequest) XXX_Size() int {
	return xxx_messageInfo_PublishRequest.Size(m)
}
func (m *PublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRequest proto.InternalMessageInfo

func (m *PublishRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PublishRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type PublishReply struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Info                 string   `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishReply) Reset()         { *m = PublishReply{} }
func (m *PublishReply) String() string { return proto.CompactTextString(m) }
func (*PublishReply) ProtoMessage()    {}
func (*PublishReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *PublishReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishReply.Unmarshal(m, b)
}
func (m *PublishReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishReply.Marshal(b, m, deterministic)
}
func (m *PublishReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishReply.Merge(m, src)
}
func (m *PublishReply) XXX_Size() int {
	return xxx_messageInfo_PublishReply.Size(m)
}
func (m *PublishReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishReply.DiscardUnknown(m)
}

var xxx_messageInfo_PublishReply proto.InternalMessageInfo

func (m *PublishReply) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *PublishReply) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

// subscribe can be called by Scheduler to subscribe topic
type SubscribeRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type SubscribeReply struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Info                 string   `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeReply) Reset()         { *m = SubscribeReply{} }
func (m *SubscribeReply) String() string { return proto.CompactTextString(m) }
func (*SubscribeReply) ProtoMessage()    {}
func (*SubscribeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{3}
}

func (m *SubscribeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeReply.Unmarshal(m, b)
}
func (m *SubscribeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeReply.Marshal(b, m, deterministic)
}
func (m *SubscribeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeReply.Merge(m, src)
}
func (m *SubscribeReply) XXX_Size() int {
	return xxx_messageInfo_SubscribeReply.Size(m)
}
func (m *SubscribeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeReply.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeReply proto.InternalMessageInfo

func (m *SubscribeReply) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *SubscribeReply) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

// stream
type PullData struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Data                 string   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullData) Reset()         { *m = PullData{} }
func (m *PullData) String() string { return proto.CompactTextString(m) }
func (*PullData) ProtoMessage()    {}
func (*PullData) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{4}
}

func (m *PullData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullData.Unmarshal(m, b)
}
func (m *PullData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullData.Marshal(b, m, deterministic)
}
func (m *PullData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullData.Merge(m, src)
}
func (m *PullData) XXX_Size() int {
	return xxx_messageInfo_PullData.Size(m)
}
func (m *PullData) XXX_DiscardUnknown() {
	xxx_messageInfo_PullData.DiscardUnknown(m)
}

var xxx_messageInfo_PullData proto.InternalMessageInfo

func (m *PullData) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PullData) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// Return published topics
type GetTopicsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTopicsRequest) Reset()         { *m = GetTopicsRequest{} }
func (m *GetTopicsRequest) String() string { return proto.CompactTextString(m) }
func (*GetTopicsRequest) ProtoMessage()    {}
func (*GetTopicsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{5}
}

func (m *GetTopicsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTopicsRequest.Unmarshal(m, b)
}
func (m *GetTopicsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTopicsRequest.Marshal(b, m, deterministic)
}
func (m *GetTopicsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopicsRequest.Merge(m, src)
}
func (m *GetTopicsRequest) XXX_Size() int {
	return xxx_messageInfo_GetTopicsRequest.Size(m)
}
func (m *GetTopicsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopicsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopicsRequest proto.InternalMessageInfo

type GetTopicsReply struct {
	Topics               []string `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTopicsReply) Reset()         { *m = GetTopicsReply{} }
func (m *GetTopicsReply) String() string { return proto.CompactTextString(m) }
func (*GetTopicsReply) ProtoMessage()    {}
func (*GetTopicsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{6}
}

func (m *GetTopicsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTopicsReply.Unmarshal(m, b)
}
func (m *GetTopicsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTopicsReply.Marshal(b, m, deterministic)
}
func (m *GetTopicsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopicsReply.Merge(m, src)
}
func (m *GetTopicsReply) XXX_Size() int {
	return xxx_messageInfo_GetTopicsReply.Size(m)
}
func (m *GetTopicsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopicsReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopicsReply proto.InternalMessageInfo

func (m *GetTopicsReply) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

func init() {
	proto.RegisterType((*PublishRequest)(nil), "service.PublishRequest")
	proto.RegisterType((*PublishReply)(nil), "service.PublishReply")
	proto.RegisterType((*SubscribeRequest)(nil), "service.SubscribeRequest")
	proto.RegisterType((*SubscribeReply)(nil), "service.SubscribeReply")
	proto.RegisterType((*PullData)(nil), "service.PullData")
	proto.RegisterType((*GetTopicsRequest)(nil), "service.GetTopicsRequest")
	proto.RegisterType((*GetTopicsReply)(nil), "service.GetTopicsReply")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x4d, 0x4f, 0xc3, 0x30,
	0x0c, 0x6d, 0xc7, 0xd8, 0x56, 0x8b, 0x55, 0xc3, 0xe2, 0x63, 0xf4, 0x84, 0x72, 0xea, 0x69, 0x42,
	0x83, 0xd3, 0xe0, 0x82, 0x84, 0xc4, 0x0d, 0x4d, 0x1d, 0x7f, 0x20, 0x2d, 0x41, 0x54, 0x8a, 0x48,
	0x69, 0x12, 0xa4, 0xfe, 0x01, 0x7e, 0x37, 0x4a, 0x9a, 0x95, 0x6c, 0x43, 0x93, 0x76, 0xf3, 0xb3,
	0xfd, 0xe2, 0xe7, 0xe7, 0xc0, 0x58, 0xb2, 0xfa, 0xbb, 0x2c, 0xd8, 0xac, 0xaa, 0x85, 0x12, 0x38,
	0x74, 0x90, 0x2c, 0x20, 0x5e, 0xea, 0x9c, 0x97, 0xf2, 0x23, 0x63, 0x5f, 0x9a, 0x49, 0x85, 0x67,
	0x70, 0xac, 0x44, 0x55, 0x16, 0xd3, 0xf0, 0x3a, 0x4c, 0xa3, 0xac, 0x05, 0x88, 0xd0, 0x7f, 0xa3,
	0x8a, 0x4e, 0x7b, 0x36, 0x69, 0x63, 0xb2, 0x80, 0x93, 0x8e, 0x5b, 0xf1, 0x06, 0x2f, 0x60, 0x20,
	0x15, 0x55, 0x5a, 0x5a, 0xea, 0x28, 0x73, 0xc8, 0x70, 0xcb, 0xcf, 0x77, 0xb1, 0xe6, 0x9a, 0x98,
	0xa4, 0x30, 0x59, 0xe9, 0x5c, 0x16, 0x75, 0x99, 0xb3, 0xbd, 0x93, 0xc9, 0x03, 0xc4, 0x5e, 0xe7,
	0xa1, 0x73, 0xee, 0x60, 0xb4, 0xd4, 0x9c, 0x3f, 0x51, 0x45, 0x0f, 0xd8, 0x0c, 0x61, 0xf2, 0xcc,
	0xd4, 0xab, 0xa9, 0x4b, 0xa7, 0x8e, 0xa4, 0x10, 0x7b, 0x39, 0xa7, 0xc3, 0x3e, 0x61, 0x74, 0x1c,
	0xa5, 0x51, 0xe6, 0xd0, 0xfc, 0xa7, 0x07, 0xe3, 0x17, 0xa1, 0x68, 0xdd, 0xac, 0x5a, 0x97, 0xf1,
	0x11, 0xa2, 0x6e, 0x07, 0xbc, 0x9a, 0xad, 0x6f, 0xb1, 0xed, 0x40, 0x72, 0xf9, 0x5f, 0xa9, 0xe2,
	0x0d, 0x09, 0xf0, 0x1e, 0x86, 0xce, 0x6c, 0xfc, 0xeb, 0xda, 0x3c, 0x5d, 0x72, 0xbe, 0x5b, 0x68,
	0xc9, 0x73, 0xe8, 0x1b, 0x17, 0xf0, 0xd4, 0x6b, 0x68, 0x4d, 0x49, 0x76, 0x53, 0x24, 0x48, 0xc3,
	0x9b, 0xd0, 0x68, 0xee, 0xf6, 0xf5, 0x34, 0x6f, 0xfb, 0xe2, 0x69, 0xde, 0xb4, 0x87, 0x04, 0xf9,
	0xc0, 0x7e, 0xb6, 0xdb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2d, 0x76, 0x98, 0x0a, 0x7d, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NotaryServiceClient is the client API for NotaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotaryServiceClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeReply, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishReply, error)
	Pull(ctx context.Context, opts ...grpc.CallOption) (NotaryService_PullClient, error)
	GetTopics(ctx context.Context, in *GetTopicsRequest, opts ...grpc.CallOption) (*GetTopicsReply, error)
}

type notaryServiceClient struct {
	cc *grpc.ClientConn
}

func NewNotaryServiceClient(cc *grpc.ClientConn) NotaryServiceClient {
	return &notaryServiceClient{cc}
}

func (c *notaryServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeReply, error) {
	out := new(SubscribeReply)
	err := c.cc.Invoke(ctx, "/service.NotaryService/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishReply, error) {
	out := new(PublishReply)
	err := c.cc.Invoke(ctx, "/service.NotaryService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryServiceClient) Pull(ctx context.Context, opts ...grpc.CallOption) (NotaryService_PullClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NotaryService_serviceDesc.Streams[0], "/service.NotaryService/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &notaryServicePullClient{stream}
	return x, nil
}

type NotaryService_PullClient interface {
	Send(*PullData) error
	Recv() (*PullData, error)
	grpc.ClientStream
}

type notaryServicePullClient struct {
	grpc.ClientStream
}

func (x *notaryServicePullClient) Send(m *PullData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *notaryServicePullClient) Recv() (*PullData, error) {
	m := new(PullData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *notaryServiceClient) GetTopics(ctx context.Context, in *GetTopicsRequest, opts ...grpc.CallOption) (*GetTopicsReply, error) {
	out := new(GetTopicsReply)
	err := c.cc.Invoke(ctx, "/service.NotaryService/GetTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotaryServiceServer is the server API for NotaryService service.
type NotaryServiceServer interface {
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeReply, error)
	Publish(context.Context, *PublishRequest) (*PublishReply, error)
	Pull(NotaryService_PullServer) error
	GetTopics(context.Context, *GetTopicsRequest) (*GetTopicsReply, error)
}

// UnimplementedNotaryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNotaryServiceServer struct {
}

func (*UnimplementedNotaryServiceServer) Subscribe(ctx context.Context, req *SubscribeRequest) (*SubscribeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedNotaryServiceServer) Publish(ctx context.Context, req *PublishRequest) (*PublishReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedNotaryServiceServer) Pull(srv NotaryService_PullServer) error {
	return status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (*UnimplementedNotaryServiceServer) GetTopics(ctx context.Context, req *GetTopicsRequest) (*GetTopicsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopics not implemented")
}

func RegisterNotaryServiceServer(s *grpc.Server, srv NotaryServiceServer) {
	s.RegisterService(&_NotaryService_serviceDesc, srv)
}

func _NotaryService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NotaryService/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServiceServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotaryService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NotaryService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotaryService_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NotaryServiceServer).Pull(&notaryServicePullServer{stream})
}

type NotaryService_PullServer interface {
	Send(*PullData) error
	Recv() (*PullData, error)
	grpc.ServerStream
}

type notaryServicePullServer struct {
	grpc.ServerStream
}

func (x *notaryServicePullServer) Send(m *PullData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *notaryServicePullServer) Recv() (*PullData, error) {
	m := new(PullData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NotaryService_GetTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServiceServer).GetTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NotaryService/GetTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServiceServer).GetTopics(ctx, req.(*GetTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotaryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.NotaryService",
	HandlerType: (*NotaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _NotaryService_Subscribe_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _NotaryService_Publish_Handler,
		},
		{
			MethodName: "GetTopics",
			Handler:    _NotaryService_GetTopics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pull",
			Handler:       _NotaryService_Pull_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
