// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MessageData struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageData) Reset()         { *m = MessageData{} }
func (m *MessageData) String() string { return proto.CompactTextString(m) }
func (*MessageData) ProtoMessage()    {}
func (*MessageData) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *MessageData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageData.Unmarshal(m, b)
}
func (m *MessageData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageData.Marshal(b, m, deterministic)
}
func (m *MessageData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageData.Merge(m, src)
}
func (m *MessageData) XXX_Size() int {
	return xxx_messageInfo_MessageData.Size(m)
}
func (m *MessageData) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageData.DiscardUnknown(m)
}

var xxx_messageInfo_MessageData proto.InternalMessageInfo

func (m *MessageData) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*MessageData)(nil), "service.MessageData")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 117 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0xe4, 0xb9,
	0xb8, 0x7d, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53, 0x5d, 0x12, 0x4b, 0x12, 0x85, 0x04, 0xb8, 0x98,
	0x73, 0x8b, 0xd3, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x23, 0x7f, 0x2e, 0x5e,
	0xbf, 0xfc, 0x92, 0xc4, 0xa2, 0xca, 0x60, 0x88, 0x0e, 0x21, 0x3b, 0x2e, 0x2e, 0xbf, 0xd4, 0x72,
	0xa8, 0x26, 0x21, 0x11, 0x3d, 0x98, 0xc1, 0x48, 0xc6, 0x48, 0x61, 0x15, 0x55, 0x62, 0xd0, 0x60,
	0x34, 0x60, 0x4c, 0x62, 0x03, 0xbb, 0xc0, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x11, 0x8d, 0x96,
	0x9b, 0x92, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NotaryServiceClient is the client API for NotaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotaryServiceClient interface {
	NewMessage(ctx context.Context, opts ...grpc.CallOption) (NotaryService_NewMessageClient, error)
}

type notaryServiceClient struct {
	cc *grpc.ClientConn
}

func NewNotaryServiceClient(cc *grpc.ClientConn) NotaryServiceClient {
	return &notaryServiceClient{cc}
}

func (c *notaryServiceClient) NewMessage(ctx context.Context, opts ...grpc.CallOption) (NotaryService_NewMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NotaryService_serviceDesc.Streams[0], "/service.NotaryService/NewMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &notaryServiceNewMessageClient{stream}
	return x, nil
}

type NotaryService_NewMessageClient interface {
	Send(*MessageData) error
	Recv() (*MessageData, error)
	grpc.ClientStream
}

type notaryServiceNewMessageClient struct {
	grpc.ClientStream
}

func (x *notaryServiceNewMessageClient) Send(m *MessageData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *notaryServiceNewMessageClient) Recv() (*MessageData, error) {
	m := new(MessageData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NotaryServiceServer is the server API for NotaryService service.
type NotaryServiceServer interface {
	NewMessage(NotaryService_NewMessageServer) error
}

// UnimplementedNotaryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNotaryServiceServer struct {
}

func (*UnimplementedNotaryServiceServer) NewMessage(srv NotaryService_NewMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method NewMessage not implemented")
}

func RegisterNotaryServiceServer(s *grpc.Server, srv NotaryServiceServer) {
	s.RegisterService(&_NotaryService_serviceDesc, srv)
}

func _NotaryService_NewMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NotaryServiceServer).NewMessage(&notaryServiceNewMessageServer{stream})
}

type NotaryService_NewMessageServer interface {
	Send(*MessageData) error
	Recv() (*MessageData, error)
	grpc.ServerStream
}

type notaryServiceNewMessageServer struct {
	grpc.ServerStream
}

func (x *notaryServiceNewMessageServer) Send(m *MessageData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *notaryServiceNewMessageServer) Recv() (*MessageData, error) {
	m := new(MessageData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _NotaryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.NotaryService",
	HandlerType: (*NotaryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewMessage",
			Handler:       _NotaryService_NewMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
