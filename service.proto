
syntax = "proto3";

package service;

// NotaryService defines methods provided by notary-server all methods require API-key authentication.
// Reply messages have common fields like a bool success and string info. 
// - success: is true if the call has successed, false otherwise
// - info: information message from server  
service NotaryService {
  rpc Subscribe(SubscribeRequest) returns (SubscribeReply) {}
  rpc Publish(PublishRequest) returns (PublishReply) {}
  rpc Finalize(FinalizeRequest) returns (FinalizeReply) {}
  rpc Pull (stream PullDataRequest) returns (stream PullDataReply) {}
  rpc GetTopics(GetTopicsRequest) returns (GetTopicsReply) {}  
  rpc GetTopic(GetTopicRequest) returns (GetTopicReply) {}
}

// publish can be called by a notary-client to open a topic and publish data on it
// if topicID is empty string notary server create new topic (can retrieve topic ID in PublishReplay)
message PublishRequest {
  string topicID = 1;
  string data = 2;
}

message PublishReply {
  bool success = 1;
  string info = 2;
  string topicID = 3;
}

// update notarisation per topic to make it final 
// finalize topic will close it and block publish request
message FinalizeRequest {
  string topicID = 1;
  string data = 2;
}

message FinalizeReply {
  bool success = 1;
  string info = 2;
}

// subscribe can be called by Scheduler to subscribe topic
message SubscribeRequest {
  string topicID = 1;
}

message SubscribeReply {
  bool success = 1;
  string info = 2;
  repeated string data = 3;
}

// stream published data into the topic to subscribers
message PullDataRequest {
  string topicID = 1;
}

message PullDataReply {
  string data = 2;
}

// return published topics
message GetTopicsRequest {}

message GetTopicsReply {
  bool success = 1;
  string info = 2;
  repeated string topics = 3;
  repeated string clientTopics = 4;
}

// return topic info (success, received data and opentimestamp hash of received data)
message GetTopicRequest {
  string topicID = 1;
}

message GetTopicReply {
  bool success = 1;
  string info = 2;
  string status = 3;
  string otsHash = 4;
  repeated string data = 5;
}